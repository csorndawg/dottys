<<<<<<< HEAD
"" source vimrc modules 

" trying hack
source $HOME/.dotfiles/vim.d/plug.vimrc
source $HOME/.dotfiles/vim.d/general.vimrc
source $HOME/.dotfiles/vim.d/leader.vimrc
source $HOME/.dotfiles/vim.d/functions.vimrc
source $HOME/.dotfiles/vim.d/plugins.vimrc
||||||| parent of 37ac5a8 (first vimrc commit)
=======
"" ------------------------
""  GENERAL 
"" ------------------------

set  nocompatible
filetype plugin indent on
syntax on
let g:is_posix = 1  " correctly highlight $() if filetype=sh
set wildmenu                        " visual autocomplete for command menu
set showmatch                       " highlight matching !!important!!
set showcmd                         " show command in bottom bar
"syntax enable
set linebreak
set noerrorbells
set autoindent
set expandtab
set smartindent
set tabstop=4 
set softtabstop=4
set shiftwidth=4
set complete-=i
set rnu
set smartcase
set colorcolumn=80
set hidden      " switch b/w buffers without having to save first
set noswapfile
set nobackup

" make undodir if not present
silent execute '!mkdir -p ~/.vim/undodir/'
set undodir=~/.vim/undodir  " need to create dir if DNE
set undofile
set incsearch   " highlight matches from ? and /
set laststatus=2 
set wrapscan    " wrap search results
set splitbelow
set splitright
set encoding=utf-8
set clipboard=unnamed
set backspace=indent,eol,start
set nrformats-=octal
set ttimeout
set ttimeoutlen=10
set incsearch
set laststatus=2
set ruler
set wildmenu
set wildignore+=*/tmp/*,*.so,*.zcignore,*.zip  " ignore specific files and directories
set scrolloff=1
set sidescroll=1
set sidescrolloff=2
set display+=lastline
set history=1500
set tabpagemax=50

"" ------------------------
"" REMAPS
"" ------------------------

" leader 
let mapleader= " "
nmap <bslash> <space>

" recover accidentally deleted text with undo (`u` in normal mode)
inoremap <C-U> <C-G>u<C-U>
inoremap <C-W> <C-G>u<C-W>

"  tmux-like commands for better window navigation remaps (change to mirror tmux)
nnoremap <C-h> <C-w>h      
nnoremap <C-j> <C-w>j      
nnoremap <C-k> <C-w>k      
nnoremap <C-l> <C-w>l      
nnoremap <leader>, <C-w>w
nnoremap <silent> vv <C-w>v


" better buffer cycling
nnoremap <leader>b :bnext<CR>
nnoremap <leader>B :bprev<CR>

" paste toggle
nnoremap <leader>pp :set paste<CR>
nnoremap <leader>PP :set nopaste<CR>

"" ------------------------
""  VIM-PLUG
"" ------------------------


" install vim-plug if not found
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" now that plugin dirs exist, install plugin 
call plug#begin()

" core  
Plug 'SirVer/ultisnips'
Plug 'vimwiki/vimwiki'
Plug 'davidhalter/jedi-vim'
Plug 'dense-analysis/ale'
Plug 'arcticicestudio/nord-vim'
Plug 'ervandew/supertab'
Plug 'honza/vim-snippets'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'mbbill/undotree'
Plug 'preservim/tagbar'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline'
Plug 'mhartington/oceanic-next'
Plug 'dense-analysis/ale'
Plug 'romainl/Apprentice'
Plug 'easymotion/vim-easymotion'

call plug#end()


"" ------------------------
"" PLUGIN CONFIG/REMAP
"" ------------------------


"" colorscheme
set t_Co=256
set background=dark
let g:nord_cursor_line_number_background = 1
let g:nord_bold_vertical_split_line = 1
let g:nord_uniform_diff_background = 1
let g:nord_italic = 1
let g:nord_underline = 1
""let g:nord_italic_comments = 1
colorscheme nord

""  vim-airline configs.
set showtabline=2   " always show tabs
"let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#branch#format = 2
let g:airline#extensions#fugitiveline#enabled = 1
let g:airline_left_sep = '>'
let g:airline#extensions#tabline#left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline#extensions#tabline#right_alt_sep = ''
let g:airline#extensions#tabline#formatter ='short_path_improved'
let g:airline#extensions#tabline#buffer_min_count = 0

" undodir
noremap <leader>u :UndotreeShow<CR>

" tagbar
nmap <leader>t :TagbarToggle<CR>

"" vim-tmux navigator
"let g:tmux_navigator_save_on_switch = 1     " write current buffer, but only if changed
"let g:tmux_navigator_no_wrap = 1            " disable default wrapping behavior


"" vimux 

" create new prompt to execute terminal command
map <Leader>vp :VimuxPromptCommand<CR>      
" rerun last VimuxRunCommand command 
map <Leader>vl :VimuxRunLastCommand<CR>
" inspect runner pane (inspect/grab part of command output)
map <Leader>vi :VimuxInspectRunner<CR>
" zoom tmux runner pane
map <leader>vz :VimuxZoomRunner<CR>


"" ale

" lint on save only 
let g:ale_lint_on_enter = 0
let g:ale_lint_on_save = 1
let g:ale_fix_on_save = 0  " disable fixer 

" error symbols
let g:ale_sign_error = '●'
let g:ale_sign_warning = '.'

" error strings format 
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

" only lint below filetypes with below linters
let g:ale_linters = {
  \ 'python': ['flake8'] ,
  \ 'bash': ['shellcheck'] ,
  \ 'sh': ['shellcheck'] ,
  \ 'yaml': ['yamllint'] ,
  \ }

" easier error cycling w/ `CTRL-e` 
nmap <silent> <C-e> <Plug>(ale_next_wrap)

" display number of errors/warnings in status line
function! LinterStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))
    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors
    return l:counts.total == 0 ? 'OK' : printf(
        \   '%d. %d● ',
        \   all_non_errors,
        \   all_errors
        \)
endfunction
set statusline+=%=
set statusline+=\ %{LinterStatus()}

"" ultisnip super-tab enhanced TAB COMPLETE
"" better key bindings for UltiSnipsExpandTrigger
let g:SuperTabDefaultCompletionType = '<tab>'
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsEditSplit="vertical"		" default is horizontal
" for custom snippets create <snip type>_custom.<snip file extension>`


function! g:UltiSnips_Complete()
  call UltiSnips#ExpandSnippet()
  if g:ulti_expand_res == 0
    if pumvisible()
      return "\<C-n>"
    else
      call UltiSnips#JumpForwards()
      if g:ulti_jump_forwards_res == 0
        return "\<TAB>"
      endif
    endif
  endif
  return ""
endfunction

function! g:UltiSnips_Reverse()
  call UltiSnips#JumpBackwards()
  if g:ulti_jump_backwards_res == 0
    return "\<C-P>"
  endif

  return ""
endfunction


if !exists("g:UltiSnipsJumpForwardTrigger")
  let g:UltiSnipsJumpForwardTrigger = "<tab>"
endif

if !exists("g:UltiSnipsJumpBackwardTrigger")
  let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
endif

"let g:UltiSnipsSnippetDirectories = ['~/.vim/mysnippets', 'UltiSnips']
let g:UltiSnipsSnippetDirectories = ['UltiSnips','~/.vim/mysnippets']

" NEEDSFIX: path no longer valid, but keeping anyway as a logic referene since 
" this style of remap has many use cases
 
" quick save buffer
nnoremap <leader>qw :w /dat/app/vbuffers/

" turn off syntax for vimdiff 
"if &diff
"        syntax off
"endif

" jedi defaults
let g:jedi#goto_command = "<leader>d"
let g:jedi#goto_assignments_command = "<leader>g"
let g:jedi#goto_stubs_command = "<leader>s"
let g:jedi#goto_definitions_command = ""
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<leader>n"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#rename_command = "<leader>r"
let g:jedi#rename_command_keep_name = "<leader>R"



" remap <leader>z to run python, bash files
nnoremap <leader>z :!w %<CR>
inoremap <leader>zz <ESC>:!w %<CR>


" yaml 
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
let g:indentLine_char = '⦙'
>>>>>>> 37ac5a8 (first vimrc commit)
