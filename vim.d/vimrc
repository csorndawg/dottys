"" General
"" ------------------------

set  nocompatible
filetype plugin indent on
syntax on
let g:is_posix = 1  " correctly highlight $() if filetype=sh
set wildmenu                        " visual autocomplete for command menu
set showmatch                       " highlight matching !!important!!
set showcmd                         " show command in bottom bar
"syntax enable
set linebreak
set noerrorbells
set autoindent
set expandtab
set smartindent
set tabstop=4 
set softtabstop=4
set shiftwidth=4
set complete-=i
set rnu
set smartcase
set colorcolumn=80
set hidden      " switch b/w buffers without having to save first
set noswapfile
set nobackup
set nohlsearch

" autocomplete settings
set completeopt+=preview
set completeopt+=menuone
set completeopt+=longest

" close quick

" make undodir if not present
silent execute '!mkdir -p ~/.vim/undodir/'
set undodir=~/.vim/undodir  " need to create dir if DNE
set undofile
set incsearch   " highlight matches from ? and /
set laststatus=2 
set wrapscan    " wrap search results
set splitbelow
set splitright
set encoding=utf-8
set clipboard=unnamed
set backspace=indent,eol,start
set nrformats-=octal
set ttimeout
set ttimeoutlen=10
set incsearch
set laststatus=2
set ruler
set wildmenu
set wildmode=longest,list
set wildignore+=*/tmp/*,*.so,*/ignore/*,*.ignore,*.zip,*.tmp  " ignore specific files and directories
set scrolloff=1
set sidescroll=1
set sidescrolloff=2
set display+=lastline
set history=1500
set tabpagemax=50
set nohlsearch

"" ------------------------
"" REMAPS
"" ------------------------

" remap leader to <space> and set backslash '/' and commas ',' 
" as leader alias 
let mapleader= " "
nmap <bslash> <space>
nmap , <space>

" recover accidentally deleted text with undo (`u` in normal mode)
inoremap <C-U> <C-G>u<C-U>
inoremap <C-W> <C-G>u<C-W>

"  tmux-like commands for better window navigation remaps (change to mirror tmux)
nnoremap <C-h> <C-w>h      
nnoremap <C-j> <C-w>j      
nnoremap <C-k> <C-w>k      
nnoremap <C-l> <C-w>l      
nnoremap <leader>, <C-w>w
nnoremap <silent> vv <C-w>v


" better buffer cycling
nnoremap <leader>b :bnext<CR>
nnoremap <leader>B :bprev<CR>

" paste toggle
nnoremap <leader>pp :set paste<CR>
nnoremap <leader>PP :set nopaste<CR>

"" ------------------------
""  VIM-PLUG
"" ------------------------


" install vim-plug if not found
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" now that plugin dirs exist, install plugin 
call plug#begin()

" core  
Plug 'SirVer/ultisnips'
Plug 'vimwiki/vimwiki'
Plug 'davidhalter/jedi-vim'
Plug 'dense-analysis/ale'
Plug 'arcticicestudio/nord-vim'
Plug 'ervandew/supertab'
Plug 'honza/vim-snippets'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'mbbill/undotree'
Plug 'preservim/tagbar'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline'
Plug 'easymotion/vim-easymotion'
Plug 'jpalardy/vim-slime', { 'for': 'python' }
Plug 'hanschen/vim-ipython-cell', { 'for': 'python' }

" alernate colorschemes
Plug 'xero/miasma.nvim' 
Plug 'mhartington/oceanic-next'
Plug 'romainl/Apprentice'

call plug#end()


"" ------------------------
"" PLUGIN CONFIG/REMAP
"" ------------------------


"" colorscheme
set t_Co=256
set background=dark
let g:nord_cursor_line_number_background = 1
let g:nord_bold_vertical_split_line = 1
let g:nord_uniform_diff_background = 1
let g:nord_italic = 1
let g:nord_underline = 1
""let g:nord_italic_comments = 1
colorscheme nord

""  vim-airline configs.
set showtabline=2   " always show tabs
"let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#branch#format = 2
let g:airline#extensions#fugitiveline#enabled = 1
let g:airline_left_sep = '>'
let g:airline#extensions#tabline#left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline#extensions#tabline#right_alt_sep = ''
let g:airline#extensions#tabline#formatter ='short_path_improved'
let g:airline#extensions#tabline#buffer_min_count = 0

" undodir
noremap <leader>u :UndotreeShow<CR>

" tagbar
nmap <leader>t :TagbarToggle<CR>

"" vim-tmux navigator
"let g:tmux_navigator_save_on_switch = 1     " write current buffer, but only if changed
"let g:tmux_navigator_no_wrap = 1            " disable default wrapping behavior


"" vimux 

" create new prompt to execute terminal command
map <Leader>vp :VimuxPromptCommand<CR>      
" rerun last VimuxRunCommand command 
map <Leader>vl :VimuxRunLastCommand<CR>
" inspect runner pane (inspect/grab part of command output)
map <Leader>vi :VimuxInspectRunner<CR>
" zoom tmux runner pane
map <leader>vz :VimuxZoomRunner<CR>


"" ale

" lint on save only 
let g:ale_lint_on_enter = 0
let g:ale_lint_on_save = 1
let g:ale_fix_on_save = 0  " disable fixer 

" error symbols
let g:ale_sign_error = '●'
let g:ale_sign_warning = '.'

" error strings format 
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

" only lint below filetypes with below linters
let g:ale_linters = {
  \ 'python': ['flake8'] ,
  \ 'bash': ['shellcheck'] ,
  \ 'sh': ['shellcheck'] ,
  \ 'yaml': ['yamllint'] ,
  \ }

" easier error cycling w/ `CTRL-e` 
nmap <silent> <C-e> <Plug>(ale_next_wrap)

" display number of errors/warnings in status line
function! LinterStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))
    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors
    return l:counts.total == 0 ? 'OK' : printf(
        \   '%d. %d● ',
        \   all_non_errors,
        \   all_errors
        \)
endfunction
set statusline+=%=
set statusline+=\ %{LinterStatus()}

"" @NOTE: installing YCM for popup menu
"" ultisnip super-tab enhanced TAB COMPLETE
"" better key bindings for UltiSnipsExpandTrigger
let g:SuperTabDefaultCompletionType = '<tab>'
let g:UltiSnipsExpandTrigger="<tab>"
"let g:UltiSnipsJumpOrExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsListSnippets="<leader><leader>"
let g:UltiSnipsEditSplit="vertical"		" default is horizontal
" for custom snippets create <snip type>_custom.<snip file extension>`


function! g:UltiSnips_Complete()
  call UltiSnips#ExpandSnippet()
  if g:ulti_expand_res == 0
    if pumvisible()
      return "\<C-n>"
    else
      call UltiSnips#JumpForwards()
      if g:ulti_jump_forwards_res == 0
        return "\<TAB>"
      endif
    endif
  endif
  return ""
endfunction

function! g:UltiSnips_Reverse()
  call UltiSnips#JumpBackwards()
  if g:ulti_jump_backwards_res == 0
    return "\<C-P>"
  endif

  return ""
endfunction


if !exists("g:UltiSnipsJumpForwardTrigger")
  let g:UltiSnipsJumpForwardTrigger = "<tab>"
endif

if !exists("g:UltiSnipsJumpBackwardTrigger")
  let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
endif

"let g:UltiSnipsSnippetDirectories = ['~/.vim/mysnippets', 'UltiSnips']
let g:UltiSnipsSnippetDirectories = ['UltiSnips','$HOME/.vim/MySnippets2']


" turn off syntax for vimdiff 
"if &diff
"        syntax off
"endif

" jedi remaps 
let g:jedi#goto_command = "<leader>jc"
let g:jedi#goto_assignments_command = "<leader>ja"
let g:jedi#goto_stubs_command = "<leader>js"
let g:jedi#goto_definitions_command = "<leader>jd"
"let g:jedi#documentation_command = ///"K"
let g:jedi#documentation_command = "<leader>j"
let g:jedi#usages_command = "<leader>jn"
let g:jedi#completions_command = "<C-Space>"
"let g:jedi#rename_command = /////"<leader>r"
"let g:jedi#rename_command_keep_name = /////"<leader>R"


" remap <leader>z to run python, bash files
nnoremap <leader>z :!w %<CR>
inoremap <leader>zz <ESC>:!w %<CR>


" yaml 
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
let g:indentLine_char = '⦙'

" VIM-IPYTHON RECOMMENDED/EXAMPLE CONFIGURATIONS
"
"------------------------------------------------------------------------------
" slime configuration 
"------------------------------------------------------------------------------
" always use tmux
let g:slime_target = 'tmux'

" fix paste issues in ipython
let g:slime_python_ipython = 1

" always send text to the top-right pane in the current tmux tab without asking
let g:slime_default_config = {
            \ 'socket_name': get(split($TMUX, ','), 0),
            \ 'target_pane': '{top-right}' }

let g:slime_dont_ask_default = 1

"------------------------------------------------------------------------------
" ipython-cell configuration
"------------------------------------------------------------------------------
" Keyboard mappings. <Leader> is \ (backslash) by default

" map <Leader>s to start IPython
nnoremap <Leader>s :SlimeSend1 ipython --matplotlib<CR>

" map <Leader>r to run script
nnoremap <Leader>r :IPythonCellRun<CR>

" map <Leader>R to run script and time the execution
nnoremap <Leader>R :IPythonCellRunTime<CR>

" map <Leader>c to execute the current cell
"nnoremap <Leader>c :IPythonCellExecuteCell<CR>
nnoremap <Leader>x :IPythonCellExecuteCell<CR>

" map <Leader>C to execute the current cell and jump to the next cell
"nnoremap <Leader>C :IPythonCellExecuteCellJump<CR>
nnoremap <Leader>xn :IPythonCellExecuteCellJump<CR>

" map <Leader>l to clear IPython screen
nnoremap <Leader>l :IPythonCellClear<CR>

" map <Leader>x to close all Matplotlib figure windows
"nnoremap <Leader>x :IPythonCellClose<CR>
nnoremap <Leader>qq :IPythonCellClose<CR>

" map [c and ]c to jump to the previous and next cell header
"nnoremap [c :IPythonCellPrevCell<CR>
"nnoremap ]c :IPythonCellNextCell<CR>
nnoremap <Leader>pc :IPythonCellPrevCell<CR>
nnoremap <Leader>nc :IPythonCellNextCell<CR>

" map <Leader>h to send the current line or current selection to IPython
nmap <Leader>h <Plug>SlimeLineSend
xmap <Leader>h <Plug>SlimeRegionSend

" map <Leader>p to run the previous command
nnoremap <Leader>p :IPythonCellPrevCommand<CR>

" map <Leader>Q to restart ipython
nnoremap <Leader>Q :IPythonCellRestart<CR>

" map <Leader>d to start debug mode
nnoremap <Leader>xd :SlimeSend1 %debug<CR>

" map <Leader>q to exit debug mode or IPython
nnoremap <Leader>q :SlimeSend1 exit<CR>

" map <F9> and <F10> to insert a cell header tag above/below and enter insert mode
nmap <F9> :IPythonCellInsertAbove<CR>a
nmap <F10> :IPythonCellInsertBelow<CR>a

" also make <F9> and <F10> work in insert mode
imap <F9> <C-o>:IPythonCellInsertAbove<CR>
imap <F10> <C-o>:IPythonCellInsertBelow<CR>A|a
